import json, logging, model
import webQ.q_orm  as orm
from webQ.q_response import Response, json_response, render_json, render_image
from webQ.q_helpers import next_id, Page, ToMysqlDateTimeNow
from model import *
from utils import parestree, parescolumntree, parescasetypetree

{% for table in tables %}
async def {{table.table_name}}_InsOrUp(request):
    """
    Description end-point
    ---
    description: {{table.table_name}}插入/更新 没有id表示插入 有id表示更新
    tags:
    - insert update
    produces:
    - application/json
    parameters:
    - in: body
      name: body
      description: {{table.table_name}}插入/更新
      required: True
      schema:
        type: object
        properties:
          {{table.pri_key}}:
            type: string
          {% for column in table.columns %}{{column}}:
            type: string
          {% endfor %}
    """
    form = await request.json()
    id = form.get('{{table.pri_key}}')
{% for column in table.columns %}    {{column}} = form.get('{{column}}')
{% endfor %}
    try:
        if id:  # update
            effectrows = await {{table.table_name}}({{table.pri_key}}=id).upd2({% for column in table.columns %}{{column}}={{column}},
            {% endfor %})
        elif not id:  # create
            effectrows = await {{table.table_name}}({{table.pri_key}}=next_id(),
            {% for column in table.columns %}{{column}}={{column}},
            {% endfor %}).save()
        data = dict(success=True, data=effectrows)
        return render_json(data)
    except Exception as e:
        logging.error(e)
        data = dict(failure=True, data=str(e))
        return render_json(data)

{% endfor %}